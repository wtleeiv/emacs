* Preface
** Functional Programming Aspects
- functions are first class
  - higher-order fns used often
- recursion used heavily
- list processing takes central role
  - recurse on sublists, etc
- side-effects (external state) uncommon
- expressions over statements
  - evaluate fn and args over assign vars
- *what* is computed over *how* to compute it
  - top-down vs bottom-up
** Potentially Interesting Libraries
- multipledispatch
  - covered a bit
- pyrsistent
  - immutable collections
- toolz
  - functional library
  - builds on ~itertools~ and ~functools~
    - idk what those are...yet
- hypothesis
  - generate test data matching specification
  - ala haskell's ~quickcheck~ library
- more-itertools
  - even more iterator things
* Avoiding Flow Control
** Encapsulation
*** Imperative
#+BEGIN_SRC python
  # initial state
  collection = get_initial_state()
  state_var = None
  # configure data
  for datum in data_set:
      if condition(state_var):
          state_var = calculate_from(datum)
          new = modify(datum, state_var)
          collection.add_to(new)
      else:
          new = modify_differently(datum)
          collection.add_to(new)
  # process data
  for thing in collection:
      process(thing)
#+END_SRC
*** Functional
shift focus
- how to create -> what is created
#+BEGIN_SRC python
  # make in isolation
  def make_collection(data_set):
      collection = get_initial_state()
      state_var = None

      for datum in data_set:
          if condition(state_var):
              state_var = calculate_from(datum)
              new = modify(datum, state_var)
              collection.add_to(new)
          else:
              new = modify_differently(datum)
              collection.add_to(new)
      return collection
  # then process
  for thing in make_collection(data_set):
      process(thing)
#+END_SRC
** Comprehension
*** Imperative
#+BEGIN_SRC python
  collection = list()
  for datum in data_set:
      if condition(datum):
          collection.append(datum)
      else:
          new = modify(datum)
          colleciton.append(new)
#+END_SRC
*** Functional
#+BEGIN_SRC python
  collection = [d if condition(d) else modify(d)
                for d in data_set]
#+END_SRC
** Generators
lazy
similar syntax to list comprehensions
*** Imperative
#+BEGIN_SRC python
  def get_log_lines(log_file):
      line = read_line(log_file)
      while True:
          try:
              if complex_condition(line):
                  yield line # generative here
              line = readline(log_file)
          except StopIteration:
              raise

  log_lines = get_log_lines(huge_log_file)
#+END_SRC
*** Object-Oriented
implement iterator interface
- ~__iter__~ and ~__next__~
#+BEGIN_SRC python
  class GetLogLines(object):
      def __init__(self, log_file):
          self.log_file = log_file
          self.line = None
      def __iter__(self):
          return self
      def __next__(self):
          if self.line is None:
              self.line = read_line(log_file)
          while not complex_condition(self.line):
              self.line = read_line(self.log_file)
          return self.line

  log_lines = GetLogLines(huge_log_file)
#+END_SRC
*** Functional
#+BEGIN_SRC python
  log_lines = (line for line in read_line(huge_log_file)
               if complex_condition(line))
#+END_SRC
** Dicts and Sets
use comprehensions like lists
#+BEGIN_SRC python
  {i:chr(65+1) for i in range(6)}

  {chr(65+i) for i in range(6)}
#+END_SRC
** Recursion
python lacks tail-call elimination
eliminate recursion w/ higher-order fns
- map, reduce, etc
*** Factorial
#+BEGIN_SRC python
  from functools import reduce
  from operator import mul

  def factorial(n):
      return reduce(mul, range(1, n+1), 1)
#+END_SRC
*** Quicksort
#+BEGIN_SRC python
  def quicksort(lst):
      "quicksort a list"
      if len(lst) == 0:
          return lst
      pivot = lst[0]
      pivots = [x for x in lst if x == pivot]
      smaller = quicksort([x for x in lst if x < pivot])
      bigger = quicksort([x for x in lst if x > pivot])
      return smaller + pivots + bigger
#+END_SRC
* Callables
** Closures vs Callable Class Instances
*** Object-Oriented
mutable state
#+BEGIN_SRC python
  class Adder(object):
      def __init__(self, n):
          self.n = n
      def __call__(self, m):
          return self.n + m

  add5 = Adder(5)
  # mutable state
  add5.n = 10
#+END_SRC
*** Functional
lexical fn def possible in python!
immutable
#+BEGIN_SRC python
  def Adder(n):
      def add(m):
          return n + m
      return add

  add5 = Adder(5)
#+END_SRC
*** Closure Shittiness
in python, closure vars bound by *name*, not value :(
watch
#+BEGIN_SRC python
  adders = [lambda m: m + n for n in range(5)]
  return [adder(10) for adder in adders]
#+END_SRC

#+RESULTS:
| 14 | 14 | 14 | 14 | 14 |
damn
*** Closure Band-Aid
explicitly bind internal var via keyword
stop binding by name
#+BEGIN_SRC python
    adders = [lambda m, n = n: m + n for n in range(5)]
    return [adder(10) for adder in adders]
#+END_SRC

#+RESULTS:
| 10 | 11 | 12 | 13 | 14 |
yay!
** Multiple Dispatch and Predicate Dispatch
call methods based on object type
- like in CLOS
predicate dispatch extends this notion
- call fn based on passing predicate conditions
* Lazy Evaluation
** functional stuff
zip, map, filter, range
all, any, min, max, sum, functools.reduce
** chaining
collections.ChainMap() is a thing too
#+BEGIN_SRC python
  from itertools import chain

  def from_logs(fnames):
      yield from (open(file) for file in fnames)

  lines = chain.from_iterable(from_logs(
      ['huge.log', 'giant.log']))
#+END_SRC
* Higher Order Functions
map and filter can be made from reduce
- I think I might remember this from /Learn You a Haskell/
- anyways, it's sick
** Common Higher Order Fns
not included in python
*** Composition
#+BEGIN_SRC python
  def compose(*funcs):
      def composition(data, funcs=funcs):
          result = data
          for f in reversed(funcs):
              result = f(result)
          return result
      return composition
#+END_SRC
*** All/Any Predictes
#+BEGIN_SRC python
  all_pred = lambda var, *preds: all(p(var) for p in preds)
  any_pred = lambda var, *preds: any(p(var) for p in preds)
#+END_SRC
*** Currying
functools.partial()
note: import opertor module to get special fns
- +, <<, *, etc
*** Decorators
just functions under the hood
mark extra functionality
- auto-cacheing, etc
